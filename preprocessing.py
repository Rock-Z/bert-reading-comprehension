import tensorflow as tf
import tensorflow_hub as hub
import tensorflow_text as text

def load_bert(preprocess_url, bert_url):
    """Return loaded bert layer and preprocessor based on given url

    Args:
        preprocess_url (String): url from `tfhub` for the corresponding preprocessor
        bert_url (String): url from `tfhub` for the pre-trained bert model
    
    Returns two tf layers: preprocessor for processing into Bert input and Bert itself
    """
    
    preprocessor = hub.load(preprocess_url)
    bert_preprocess = hub.KerasLayer(preprocessor)
    
    bert = hub.load(bert_url)
    bert_layer = hub.KerasLayer(bert)
    
    return bert_preprocess, bert_layer

def concat_bert_inputs(inputs):
    """Convert a list of dictionaries into one single dictionary of BERT input tensors

    Args:
        inputs (List<Dictionary>): A list of bert input dictionaries to concatenate.

    Returns:
        Dictionary: A dictionary, in which each field contains one single tensor from the concatenation of input list
    """
    ids, masks, type_ids = [], [], []
    for i in inputs:
        ids.append(i['input_word_ids'])
        masks.append(i['input_mask'])
        type_ids.append(i['input_type_ids'])
    
    return {'input_word_ids': tf.convert_to_tensor(ids),
            'input_mask': tf.convert_to_tensor(masks),
            'input_type_ids': tf.convert_to_tensor(type_ids)}
        

def dcmn_preprocess(data):
    """Given data loaded from the dataloader in `data.py`, preprocesses into input and
    labels for the DCMN model using the given preprocessor

    Args:
        data (List<Example>): Output generated by read_examples()
    """
    p, q, o, answers = [], [], [], []
    
    for entry in data:
        answers += entry.answers
        for i, question in enumerate(entry.question):
            p.append(entry.passage)
            q.append(question)
            o.append(tf.strings.join(entry.options[i], separator='[SEP]'))    
    
    p = tf.convert_to_tensor(p)
    q = tf.convert_to_tensor(q)
    o = tf.convert_to_tensor(o)
    
    return (p, q, o), answers
        